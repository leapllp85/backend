# Multi-stage build for production - optimized for size
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies in single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
        gcc \
        g++ \
        libc6-dev \
        libpq-dev \
        linux-libc-dev \
        cmake \
        make \
        pkg-config \
        libffi-dev \
        libssl-dev \
        curl \
        build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies with optimizations
COPY requirements-working.txt /tmp/
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir --compile -r /tmp/requirements-working.txt \
    && find /usr/local -type d -name __pycache__ -exec rm -rf {} + \
    && find /usr/local -type f -name "*.pyc" -delete \
    && find /usr/local -type f -name "*.pyo" -delete \
    && find /usr/local -name "*.dist-info" -exec rm -rf {} +

# Production stage - lightweight Slim
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=backend.settings
ENV DEBUG=0
ENV PIP_NO_CACHE_DIR=1

# Install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        libpq5 \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -g 1000 django \
    && useradd -r -u 1000 -g django django

# Set work directory
WORKDIR /app

# Copy Python dependencies from builder stage (selective copy)
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy only essential files (optimized for production)
COPY --chown=django:django requirements-working.txt manage.py ./
COPY --chown=django:django backend/ ./backend/
COPY --chown=django:django apis/ ./apis/
COPY --chown=django:django authapi/ ./authapi/

# Create necessary directories and set permissions in single layer
RUN mkdir -p /app/staticfiles /app/media /app/logs \
    && chown -R django:django /app \
    && find /app -type f -name "*.pyc" -delete \
    && find /app -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

# Switch to non-root user
USER django

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Expose port
EXPOSE 8000

# Lightweight health check (no curl dependency)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/health/', timeout=5)" || exit 1

# Use gunicorn for production with optimized settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "2", \
     "--worker-class", "sync", \
     "--timeout", "120", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "backend.wsgi:application"]
